Refactoring for loops to LINQ

Language integrated query (LINQ) was first introduced 3 years ago in 2007. It has taken time for developers to fully grasp its usefulness. On release it was promoted as a way to integrate database and XML querying into .NET languages. Although LINQ made heavy use of terminology from SQL (SELECT/WHERE/AGGREGATE)  in fact LINQ was based on functional programming concepts.  Recently, I have become more of a polygot programmer - exploring and using languages such as Javascript, Ruby and F#. These languages are more upfront about their functional influences I and now find myself using LINQ to write C# in a more functional style.

What advantages does a functional style bring? 
* shorter more concise code
* less temporary variables
* less errors 
* easier to understand, more declarative code

There are some disadvantages however: 
* debugging is harder
* performance gotchas due to deferred execution (or lazy evaluation as it is referred to functional programming) 

In a team environment to realise these advantages your fellow developers must become familiar with these functional approaches too. This should get easier over time as functional constructs are now built into most languages. Additionally tools such as ReSharper now support automatic refactoring to LINQ expressions.

Thinking functional

LINQ introduced a more high level, declarative way to work with collections. Instead of manipulating individual items in a collection, operations are performed on the entire collection. These operations can be chained together to produce the same results that would traditional be achieved by a for loop. Mark Needham refers to this as the transformational mindset in his talk on Functional c# (http://www.markhneedham.com/blog/2010/01/31/ddd8-mixing-functional-and-object-oriented-approaches-to-programming-in-c/).

Now I often regard a for or foreach loop in code as a code smell. In many cases it can be refactored into a shorter more meaningful functional version. Often this will reduce the amount of code by 70% to 80%. A key skill to enable you to do this is to recognise which type of looping construct map to which functional operations.  Below I show several examples where I refactor foreach to a LINQ expression.

The functionals refactoring

In these examples below we will manipulate a list of whiskies. Each whiskey has a name, an age, a price and a country of origin:

[sourcecode language="csharp"]
public class Whiskey
{
	public Whiskey()
	{
		Ingredients = new List<Whiskey>();
	}
	
	public string Name { get; set; }
	public int Age { get; set; }
	public decimal Price { get; set; }
	public string Country { get; set; }
	
	public List<Whiskey> Ingredients {get; set;}
}


Whiskey ardbeg = new Whiskey { Name = "Ardbeg 1998", Age = 12, Price = 49.95m, Country = "Scotland" };
Whiskey glenmorangie = new Whiskey { Name = "Glenmorangie", Age = 10, Price = 28.95m, Country = "Scotland" };
Whiskey talisker = new Whiskey { Name = "Talisker", Age = 18, Price = 57.95m, Country = "Scotland" };
Whiskey cragganmore = new Whiskey { Name = "Cragganmore", Age = 12, Price = 30.95m, Country = "Scotland" };
Whiskey redbreast = new Whiskey { Name = "Redbreast", Age = 12, Price = 27.95m, Country = "Ireland" };
Whiskey greenspot = new Whiskey { Name = "Green spot", Age = 8, Price = 44.48m, Country = "Ireland" };

List<Whiskey> whiskies = new List<Whiskey> { ardbeg, glenmorangie, talisker, cragganmore, redbreast, greenspot };
[/sourcecode]

Creating one list of objects from another

In our first example we create a list of whiskey names from the list of whiskies. 

[sourcecode language="csharp"]
var whiskeyNames = new List<string> ();
foreach (var whiskey in whiskies) {
    whiskeyNames.Add (whiskey.Name);
}

Console.WriteLine("Whiskey names: {0}", String.Join(", ", whiskeyNames.ToArray()));
[/sourcecode]

This outputs:
Whiskey names: Ardbeg 1998, Glenmorangie, Talisker, Cragganmore, Redbreast, Green spot

Converting a list of objects to another list of objects is called mapping or projection in functional programming. The LINQ operation to do this is called Select.

[sourcecode language="csharp"]
	var whiskeyNames = whiskies.Select(x=> x.Name).ToList();
[/sourcecode]



* Filtering down data, removing items we dont care about
* Counting the number of time something occurs in a list (usually with a condition) - TODO note that count (and first) allow you to pass in a predicate
* Testing if something is true for any element of a list
* Testing if something is true for all elements of a list
* [TODO] Summing?
* Finding the 'best' element in a list - TODO talk about accumaltor here
* For list of lists flattening them down to a single list




[sourcecode language="csharp"]
[/sourcecode]
