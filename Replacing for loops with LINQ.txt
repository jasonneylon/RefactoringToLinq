Refactoring for loops to LINQ

Language integrated query (LINQ) was first introduced into the .NET framework 3 years ago in 2007. It taken time for developers to fully grasp its power. On release it was promoted as a way to integrate database and XML querying into the language. However, for me its been an introduction into a more functional approach to programming. Recently, I have become more of a polygot programmer - exploring and using langauges such as Javascript, Ruby and F#. These languages are more upfront about their funcional influences I and now find myself writing C# in a much more functional style.

What advantages does a functional approach bring? 
* shorter more concise code
* less (error prone) temporary variables
* easier to understand, more declarive code - code which states what you want rather than details of how to achieve it

In a team environment to realise these advantages your fellow developers must become familar with these functional approaches too. This should get easier over time as functional constructs are now built into most languages. Additionally tools such as Resharper now support automatic refactoring to Linq expressions.

Whenever I see a for or foreach loop in the code I am working I often regard it as a code smell. In many cases it can be refactored into a shorter more meaningful functional version. Often this will reduce the amount of code by 70% to 80%. A key skill to enable you to do this to recognise which type of looping code contruct map to which functional operations.  In this post I will discuss how to  

Goodbye For Loop
 
* Creating one list from another
* Filtering down data
* Counting the number of time something occurs in a list (usually with a condition)
* Testing if something is true for any element of a list
* Testing if something is true for all elements of a list
* Finding the 'best' element in a list
* For list of lists flattening them down to a single list



[sourcecode language="csharp"]
[/sourcecode]



    class Program
    {
        static Whiskey ardbeg = new Whiskey { Name = "Ardbeg 1998", Age = 12, Price = 49.95m, Country = "Scotland" };
        static Whiskey glenmorangie = new Whiskey { Name = "Glenmorangie", Age = 10, Price = 28.95m, Country = "Scotland" };
        static Whiskey talisker = new Whiskey { Name = "Talisker", Age = 18, Price = 57.95m, Country = "Scotland" };
        static Whiskey cragganmore = new Whiskey { Name = "Cragganmore", Age = 12, Price = 30.95m, Country = "Scotland" };
        static Whiskey redbreast = new Whiskey { Name = "Redbreast", Age = 12, Price = 27.95m, Country = "Ireland" };
        static Whiskey greenspot = new Whiskey { Name = "Green spot", Age = 8, Price = 44.48m, Country = "Ireland" };

        static List<Whiskey>  whiskies = new List<Whiskey>() {
                ardbeg,
                glenmorangie,
                talisker,
                cragganmore,
                redbreast,
                greenspot
            };

        static List<Owner> owners = new List<Owner>()
        {
            new Owner("Glenmorangie", ardbeg, glenmorangie),
            new Owner("Diageo", talisker, cragganmore),
            new Owner("Pernod", redbreast, greenspot)
        };

        static void LoopHappyVersion()
        {

            // project to a different type
            var whiskeyNames = new List<string>();
            foreach (var whiskey in whiskies)
            {
                whiskeyNames.Add(whiskey.Name);
            }

            ObjectDumper.Dump(whiskeyNames);

            // filter down to good value whiskey

            var goodValueWhiskeies = new List<Whiskey>();
            foreach (var whiskey in whiskies)
            {
                if (whiskey.Price < 25m)
                {
                    goodValueWhiskeies.Add(whiskey);
                }
            }
            ObjectDumper.Dump(goodValueWhiskeies);

            var howMany12YearOldWhiskies = 0;
            foreach (var whiskey in whiskies)
            {
                if (whiskey.Age == 12)
                {
                    howMany12YearOldWhiskies++;
                }
            }

            Console.WriteLine("How many 12 year old whiskies do we have {0}", howMany12YearOldWhiskies); 
            

            // Quantifier examples - all 
            var allAreScottish = true;
            foreach (var whiskey in whiskies)
            {
                if (whiskey.Country != "Scotland")
                {
                    allAreScottish = false;
                    break;
                }
            }

            Console.Out.WriteLine("All are scottish? {0}", allAreScottish);

            var isThereIrishWhiskey = false;
            foreach (var whiskey in whiskies)
            {
                if (whiskey.Country == "Ireland")
                {
                    isThereIrishWhiskey = true;
                    break;
                }
            }

            Console.Out.WriteLine("Is there Irish whiskey? {0}", isThereIrishWhiskey);

            // max - aggregation examples
            Whiskey mostExpensiveWhiskey = null;
            foreach (var challenger in whiskies)
            {
                if (mostExpensiveWhiskey == null)
                {
                    mostExpensiveWhiskey = challenger;
                }
                if (challenger.Price > mostExpensiveWhiskey.Price)
                {
                    mostExpensiveWhiskey = challenger;
                }
            }
            Console.WriteLine("mostExpensive is");
            ObjectDumper.Dump(mostExpensiveWhiskey);

            // doing too much
            var scottishWhiskiesCount = 0;
            var scottishWhiskeyTotal = 0m;
            foreach (var whiskey in whiskies)
            {
                if (whiskey.Country == "Scotland")
                {
                    scottishWhiskiesCount++;
                    scottishWhiskeyTotal += whiskey.Price; 
                }
            }

            scottishWhiskiesCount = 0;
            scottishWhiskeyTotal = 0m;

            List<Whiskey> scottishWhiskies = new List<Whiskey>();
            foreach (var whiskey in whiskies)
            {
                if (whiskey.Country == "Scotland")
                {
                    scottishWhiskies.Add(whiskey);
                }
            }
            foreach (var whiskey in scottishWhiskies)
            {
                scottishWhiskiesCount++;
            }
            
            foreach (var whiskey in scottishWhiskies)
            {
                scottishWhiskeyTotal += whiskey.Price;
            }

            Console.WriteLine("{0} scottish whiskies costing {1}", scottishWhiskiesCount, scottishWhiskeyTotal);

            // whiskey names from owners

            List<string> whiskeyNamesFromOwners = new List<string>();
            foreach (var owner in owners)
            {
                foreach (var whiskey in owner.Whiskies)
                {
                    whiskeyNamesFromOwners.Add(whiskey.Name);
                }
            }

            ObjectDumper.Dump(whiskeyNamesFromOwners);
        }

        static void LinqVersion()
        {
            // project to a different type
            var whiskeyNames = whiskies.Select(x => x.Name).ToList();

            ObjectDumper.Dump(whiskeyNames);

            var goodValueWhiskies = whiskies.Where(x => x.Price < 25m).ToList();

            ObjectDumper.Dump(goodValueWhiskies);

            var howMany12YearOldWhiskies = whiskies.Count(x => x.Age == 12);

            Console.WriteLine("How many 12 year old whiskies do we have {0}", howMany12YearOldWhiskies); 

            // Quantifier examples - all 
            var allAreScottish = whiskies.All(x => x.Country == "Scotland");

            Console.Out.WriteLine("All are scottish? {0}", allAreScottish);

            var isThereIrishWhiskey = whiskies.Any(x=> x.Country == "Ireland");

            Console.Out.WriteLine("Is there Irish whiskey? {0}", isThereIrishWhiskey);

            // order and first - aggregation examples
            Whiskey mostExpensiveWhiskey = whiskies.OrderByDescending(x=> x.Price).First();
            Console.WriteLine("mostExpensive is");

            Whiskey mostExpensiveWhiskey2 = whiskies.Aggregate(
                (champion, challenger) => challenger.Price > champion.Price ? challenger : champion
                );
            Console.WriteLine("mostExpensive using aggregate :");
            ObjectDumper.Dump(mostExpensiveWhiskey2);

            var scottishWhiskiesCount = 0;
            var scottishWhiskeyTotal = 0m;
            var scottishWhiskies = whiskies.Where(x => x.Country == "Scotland");
            scottishWhiskeyTotal = scottishWhiskies.Sum(x => x.Price);
            scottishWhiskiesCount = scottishWhiskies.Count();

            Console.WriteLine("{0} scottish whiskies costing {1}", scottishWhiskiesCount, scottishWhiskeyTotal);

            var whiskeyNamesFromOwners = owners.SelectMany(x => x.Whiskies).Select(x=> x.Name).ToList();

            whiskeyNamesFromOwners = (from owner in owners
                                      from whiskey in owner.Whiskies
                                      select whiskey.Name).ToList();

            ObjectDumper.Dump(whiskeyNamesFromOwners);

            
            // http://code.google.com/p/morelinq/ - has this
        }
        static void Main(string[] args)
        {
            LoopHappyVersion();
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Out.WriteLine("Linq version");
            LinqVersion();
        }
    }


    public class Whiskey
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public decimal Price { get; set; }
        public string Country { get; set; }
    }

        public class Owner
        {
            public Owner(string name, params Whiskey[] whiskies)
            {
                Name = name;
                Whiskies = whiskies;
            }
            public string Name {get;set; }
            public IEnumerable<Whiskey> Whiskies { get; set; }
        }

